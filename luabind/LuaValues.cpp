#include "LuaValues.h"

//-------------------------------------------------------------------------------------------------
// LuaValueInt
//-------------------------------------------------------------------------------------------------

LuaValueInt::LuaValueInt(int v)
  :ILuaValue()
  ,m_val(v)
{}

//-------------------------------------------------------------------------------------------------
void LuaValueInt::Push(lua_State *luaState) const
{
  lua_pushinteger(luaState, m_val);
}

//-------------------------------------------------------------------------------------------------
void LuaValueInt::Pop(lua_State *luaState)
{
  m_val = lua_tointeger(luaState, -1);
}

//-------------------------------------------------------------------------------------------------
// LuaValueBool
//-------------------------------------------------------------------------------------------------

LuaValueBool::LuaValueBool(bool b)
  :ILuaValue()
  ,m_val(b)
{}

//-------------------------------------------------------------------------------------------------
void LuaValueBool::Push(lua_State *luaState) const
{
  lua_pushboolean(luaState, m_val);
}

//-------------------------------------------------------------------------------------------------
void LuaValueBool::Pop(lua_State *luaState)
{
  m_val = (lua_toboolean(luaState, -1)!=0);
}

//-------------------------------------------------------------------------------------------------
// LuaValueString
//-------------------------------------------------------------------------------------------------

LuaValueString::LuaValueString(const std::string &v)
  :ILuaValue()
  ,m_val(v)
{}

//-------------------------------------------------------------------------------------------------
void LuaValueString::Push(lua_State *luaState) const
{
  lua_pushstring(luaState, m_val.c_str());
}

//-------------------------------------------------------------------------------------------------
void LuaValueString::Pop(lua_State *luaState)
{
  m_val = lua_tostring(luaState, -1);
}

//-------------------------------------------------------------------------------------------------
// LuaValueDouble
//-------------------------------------------------------------------------------------------------

LuaValueDouble::LuaValueDouble(double v)
  :ILuaValue()
  ,m_val(v)
{}

//-------------------------------------------------------------------------------------------------
void LuaValueDouble::Push(lua_State *luaState) const
{
  lua_pushnumber(luaState, m_val);
}

//-------------------------------------------------------------------------------------------------
void LuaValueDouble::Pop(lua_State *luaState)
{
  m_val = lua_tonumber(luaState, -1);
}

//-------------------------------------------------------------------------------------------------
// LuaValueNIL
//-------------------------------------------------------------------------------------------------

LuaValueNIL::LuaValueNIL()
  :ILuaValue()
{}

//-------------------------------------------------------------------------------------------------
void LuaValueNIL::Push(lua_State *luaState) const
{
  lua_pushnil(luaState);
}

//-------------------------------------------------------------------------------------------------
void LuaValueNIL::Pop(lua_State *luaState)
{
//  lua_remove(luaState, -1) 
  lua_pop(luaState, 1);
}
